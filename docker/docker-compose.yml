services:
  # FastAPI Application 
  fastapi:
    build:
      context: ..
      dockerfile: docker/minirag/Dockerfile
    container_name: fastapi
    volumes:
      - fastapi_data:/app/assets
    ports:
      - "8000:8000"
    networks:
      - backend
    restart: always
    depends_on:
      pgvector:
        condition: service_healthy
    env_file:
      - ./env/.env.app
  # Nginx service
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "81:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - backend
    depends_on:
      - fastapi
    restart: always

  # PostgreSQL
  pgvector:
    image: pgvector/pgvector:0.8.0-pg17-bookworm
    container_name: pgvector
    ports:
      - "5400:5432"
    volumes:
      - pgvector:/var/lib/postgresql/data
    env_file:
      - ./env/.env.postgres
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Qdrant
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant:/qdrant/storage
    networks:
      - backend
    restart: always


  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - backend
    restart: always
    env_file:
      - ./env/.env.grafana
    depends_on:
      - prometheus

  # Node Exporter for system metrics 
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - backend
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    env_file:
      - ./env/.env.postgres-exporter 
    depends_on:
      - pgvector
    networks:
      - backend
    restart: always
    
networks:
  backend:
    driver: bridge

volumes:
  fastapi_data:
  pgvector:
  qdrant:
  prometheus_data:
  grafana_data: